import os
import openai
import requests
import json

def load_agent(filepath):
    with open(filepath, 'r') as file:
        return json.load(file)

def openai_api_request(model="gpt-3.5-turbo",
                       messages=None,
                       temperature=1,
                       top_p=1,
                       n=1,
                       presence_penalty=0,
                       frequency_penalty=0,
                       logprobs=True):  # Add logprobs parameter
    
    url = "https://api.openai.com/v1/chat/completions"
    api_key = os.getenv("OPENAI_API_KEY")

    headers = {
        "Content-Type": "application/json; charset=utf-8",
        "Authorization": f"Bearer {api_key}",
    }

    data = {
        "model": model,
        "messages": messages,
        "temperature": temperature,
        "top_p": top_p,
        "n": n,
        "presence_penalty": presence_penalty,
        "frequency_penalty": frequency_penalty,
        "logprobs": logprobs  # Include this in your request
    }

    response = requests.post(url, headers=headers, json=data)
    response_json = response.json()
    
    # Extract token usage and logprob information
    token_usage = response_json.get('usage', {})
    prompt_tokens = token_usage.get('prompt_tokens', 0)
    completion_tokens = token_usage.get('completion_tokens', 0)
    total_tokens = token_usage.get('total_tokens', 0)

    # Extract the logprobs of each token
    choices = response_json.get('choices', [])
    if choices:
        logprobs_list = [logprob['logprob'] for logprob in choices[0].get('logprobs', {}).get('content', [])]
    else:
        logprobs_list = []

    # Debugging information
    if not logprobs_list:
        print("Logprobs are empty. Response JSON:", response_json)

    return response_json, prompt_tokens, completion_tokens, total_tokens, logprobs_list

class API_Call():

    def __init__(self, agent=None):
        openai.api_key = os.getenv("OPENAI_API_KEY")
        if agent is None:
            self.agent_data = load_agent("agents/default.json")
        else:
            self.agent_data = load_agent(f"agents/{agent}.json")
        
    def update_agent(self, filename):
        self.agent_data = load_agent(filename)
   
    def thinkAbout(self, message, conversation, model=None, debug=False):
        try:
            response = openai.Moderation.create(
                input=message
            )
        except:
            response = {"results": [{"flagged": False}]}

        valid_message = not response["results"][0]["flagged"]

        model = self.agent_data.get("model", "gpt-3.5-turbo")

        if model is None:
            model = self.agent_data.get("model", "gpt-3.5-turbo")

        if valid_message:
            FormattedMessage = {"role": "user", "content": message}
            conversation.append(FormattedMessage)

            try:
                response, prompt_tokens, completion_tokens, total_tokens, logprobs_list = openai_api_request(
                    model=model,
                    messages=conversation,
                    temperature=self.agent_data["temperature"],
                    frequency_penalty=self.agent_data["frequency_penalty"],
                    presence_penalty=self.agent_data["presence_penalty"],
                    top_p=self.agent_data["top_p"]
                )
            except:
                try:
                    response, prompt_tokens, completion_tokens, total_tokens, logprobs_list = openai_api_request(
                        model="gpt-3.5-turbo",
                        messages=conversation,
                        temperature=self.agent_data["temperature"],
                        frequency_penalty=self.agent_data["frequency_penalty"],
                        presence_penalty=self.agent_data["presence_penalty"],
                        top_p=self.agent_data["top_p"]
                    )
                    response['choices'][0]['message']['content'] += "(Generated by gpt-3.5 as you do not have access to gpt4)"
                except openai.error.AuthenticationError as e:
                    response = {'choices': [{'message': {'content': e.__str__()}}], 'usage': {'prompt_tokens': 0, 'completion_tokens': 0, 'total_tokens': 0}}
                    prompt_tokens, completion_tokens, total_tokens, logprobs_list = 0, 0, 0, []

            if "error" in response.keys():
                conversation.append({"role": "assistant", "content": response["error"]["message"]})
                return conversation, 0, 0, 0, []  # Ensure it returns five values

            conversation.append({"role": "assistant", "content": response['choices'][0]['message']['content']})

            if debug:
                with open("logs.txt", "w", encoding="utf-8") as file:
                    for i in conversation:
                        file.write(str(i) + "\n")

            # Debugging information
            if not logprobs_list:
                print("Logprobs are empty. Response JSON:", response)

            # Return additional logprob information
            return conversation, prompt_tokens, completion_tokens, total_tokens, logprobs_list

        else:
            FormattedMessage = {"role": "user", "content": message}
            conversation.append(FormattedMessage)
            conversation.append({"role": "assistant", "content": "Je suis désolé, ceci est un message non valide car contraire aux termes et conditions"})

        return conversation, 0, 0, 0, []